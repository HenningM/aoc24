class InputReader {
  depend java.util.Scanner;
  depend java.util.ArrayList;
  depend java.util.List;

  public static List<String> readInput() {
    Scanner scanner = new Scanner(System.in);
    List<String> lines = new ArrayList<String>();

    while (scanner.hasNextLine()) {
      String line = scanner.nextLine();
      lines.add(line);
    }
    scanner.close();
    return lines;
  }
}

class Pad {
  abstract;
  depend java.util.List;
  depend java.util.LinkedList;
  depend java.util.HashMap;
  depend java.awt.Point;

  const Direction[] DIRECTIONS = {
    new Direction(1, 0),
    new Direction(-1, 0),
    new Direction(0, -1),
    new Direction(0, 1)
  };

  lazy Point deadZone;
  lazy List<List<Character>> buttons;

  public List<String> findPaths(Character from, Character to) {
    var queue = new LinkedList<List<String>>();
    queue.add(List.of("" + from, ""));
    var dist = new HashMap<Character, Integer>();
    dist.put(from, 0);
    var paths = new LinkedList<String>();

    while (queue.size() > 0) {
      var head = queue.poll();
      var node = head.get(0).charAt(0);
      var path = head.get(1);
      var coords = findCoords(node);

      if (node == to) {
        paths.add(path);
        continue;
      }

      for (var dir: DIRECTIONS) {
        var nCoords = new Point(coords.x + dir.getX(), coords.y + dir.getY());
        if (isInBounds(nCoords)) {
          var nNode = this.getButtons().get(nCoords.y).get(nCoords.x);
          var nPath = path + dir.toChar();
          var nDist = dist.get(nNode) == null ? Integer.MAX_VALUE : dist.get(nNode);
          var toDist = dist.get(to) == null ? Integer.MAX_VALUE : dist.get(to);

          if (nPath.length() <= nDist && nPath.length() <= toDist) {
            dist.put(nNode, nPath.length());
            queue.add(List.of("" + nNode, nPath));
          }
        }
      }
    }

    return paths;
  }

  private boolean isInBounds(Point p) {
    var buttons = this.getButtons();
    return (p.y < buttons.size() && p.y >= 0 && p.x < buttons.get(0).size() && p.x >= 0 && !p.equals(this.getDeadZone()));
  }

  private Point findCoords(Character c) {
    for (int y = 0; y < this.getButtons().size(); y++) {
      for (int x = 0; x < this.getButtons().get(y).size(); x++) {
        if (this.getButtons().get(y).get(x).equals(c)) {
          return new Point(x, y);
        }
      }
    }
    return null;
  }
}

class NumPad {
  depend java.util.List;
  depend java.awt.Point;
  isA Pad;

  Point currentPos;

  Point deadZone = new Point(0, 3);
  List<List<Character>> buttons = List.of(
    List.of('7', '8', '9'),
    List.of('4', '5', '6'),
    List.of('1', '2', '3'),
    List.of(' ', '0', 'A'));
}

class DirPad {
  depend java.util.List;
  depend java.awt.Point;
  isA Pad;

  Point deadZone = new Point(0, 0);
  List<List<Character>> buttons = List.of(
    List.of(' ', '^', 'A'),
    List.of('<', 'v', '>'));
}

class Direction {
  Integer x;
  Integer y;

  public static Direction fromChar(char dirChar) {
    if (dirChar == '^') {
      return new Direction(0, -1);
    }
    if (dirChar == '>') {
      return new Direction(1, 0);
    }
    if (dirChar == '<') {
      return new Direction(-1, 0);
    }
    return new Direction(0, 1);
  }

  public char toChar() {
    if (this.x == 1) {
      return '>';
    }
    if (this.x == -1) {
      return '<';
    }
    if (this.y == 1) {
      return 'v';
    }
    return '^';
  }

}

interface AOCSolver {
  Long solve();
}

class Day21PartSolver {
  abstract;
  depend java.util.List;
  depend java.util.HashMap;
  isA AOCSolver;
  List<String> input;
  * -> 1 NumPad numPad;
  * -> 1 DirPad dirPad;
  HashMap<String, Long> seqCache = new HashMap<String, Long>();

  public abstract Long solve();

  public Long solve(int levels) {
    var numPad = this.getNumPad();
    var x = numPad.getCurrentPos().x;
    var y = numPad.getCurrentPos().y;
    var sum = 0L;
    for (String in: this.getInput()) {
      var dirPadSeq = findShortestSeq(numPad, in, 'A', levels);
      var num = Long.parseLong(in.substring(0, in.length() - 1));
      var complexity = num * dirPadSeq;
      sum += complexity;
    }
    return sum;
  }

  protected Long findShortestSeq(Pad pad, String target, Character current, int iterations) {
    if (target.length() < 1) {
      return 0L;
    }
    var cacheKey = "" + pad.hashCode() + target + current + iterations;
    var cacheEntry = this.seqCache.get(cacheKey);
    if (cacheEntry != null) {
      return cacheEntry;
    }

    var seq = -1L;
    var next = target.charAt(0);
    var toNext = pad.findPaths(current, next);

    if (iterations < 1) {
      seq = toNext.get(0).length() + 1;
    } else {
      for (var i: toNext) {
        var par = findShortestSeq(this.dirPad, i + "A", 'A', iterations - 1);
        if (seq == -1 || par < seq) {
          seq = par;
        }
      }
    }
    var res = seq + findShortestSeq(pad, target.substring(1), next, iterations);
    this.seqCache.put(cacheKey, res);
    return res;
  }
}

class Day21PartOneSolver {
  isA Day21PartSolver;
  depend java.util.List;

  public Long solve() {
    return super.solve(2);
  }
}

class Day21PartTwoSolver {
  isA Day21PartSolver;
  depend java.util.List;

  public Long solve() {
    return super.solve(25);
  }
}

class Day21 {
  depend java.util.Arrays;
  depend java.awt.Point;

  * -> 1 InputReader ir;
  * -> 1 Day21PartOneSolver p1Solver;
  * -> 1 Day21PartTwoSolver p2Solver;

  public static void main(String[] args) {
    var input = InputReader.readInput();
    var numPad = new NumPad(new Point(2, 3));
    var dirPad = new DirPad();

    var p1Solver = new Day21PartOneSolver(input, numPad, dirPad);
    var p1Solution = p1Solver.solve();
    System.out.println(p1Solution);

    var p2Solver = new Day21PartTwoSolver(input, numPad, dirPad);
    var p2Solution = p2Solver.solve();
    System.out.println(p2Solution);
  }
}
